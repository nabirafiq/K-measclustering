# -*- coding: utf-8 -*-
"""NRCM_Kmeans.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GNmR7AFK8tVh-Mmct3QT1yUnTmqFLlBh

Name:P.Rafeeq

Roll No: 21X05A6740

Branch: CSE(DS)

#Project title : Analysis and prediction of "small- customers.csv" of american mall markets called as phonix small
#  To find out how many customers are visited to a particular task on the basis of these prediction of Annual income vs pending scores

#Disclamier  In this particular datasett we assume  Annual income as acentroid and spending score from range 1-100 called as data nodes of the cluster

#Problem statement: The American finance market as per GDP of 2011 'Phonix_trillums' are as the first range out of five.
#The owner wants to be EXact which paricular shop or product  search  in different kind of clusters in entire mall.
#As a Data science Engineer predict the futuristic financial market for upcoming GDP rate based on No.of clusters.
#The client want atleast 5 top clusters(shop)

#Conclusion : According to the model basis prediction using machine learning algorithm  clustering we found that cluster were consists re color is  a higest cluster which attached more than 50 data nodes

#Reference :The model building algorithm develop for all kinds of clusterion values.yellow spot represent centroid which max value is 3
"""

#import the numpy, matlot, pandas libery's
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

#Read the dataset take variable name called "dataset" only.
dataset = pd.read_csv("Mall_Customers.csv")
# without printing this data add in separet variable as input variable Caqpital X only. loc index by select the all row ,
#and give the required colum index like[3,4].for this particular dataset.
x = dataset.iloc[:,[3,4]].values

## <THE ELBOW METHOD>
#from sklearn used "sklearn.cluster" attribute and import KMeans
#Take a distance from from centroid to cluster point with WrapsColumnExpression.
# Assume you have 10 cluster and iterate the for up to range 10 with iterater kmeans++.
# Fit the model if value comes too samlla in range.
#For clustering in wcss ,inertia is adding / appending is required.(kmeans.inertia_)#defalut usecase.
#Plot the poarticular graph along with the wcss and your range which you taken as input variable.
#Add title "The Elbow Method".
#Lable x variable as "No of Customers".
#Lable y variable as "WCSS".
#Plot the graph using plt.show().
from sklearn.cluster import KMeans
wcss = []
for i in range(1,11):
  kmeans = KMeans(n_clusters=i,init="k-means++",random_state = 42)
  kmeans.fit(x)
  wcss.append(kmeans.inertia_)
plt.plot(range(1,11),wcss)
plt.title("The Elbow Method")
plt.xlabel("No of clusters")
plt.ylabel("wcss")
plt.show()

for i in range(1,11):
  kmeans=KMeans(n_clusters = 3,init ="k-means++",random_state = 42)
  y_kmeans=kmeans.fit_predict(x)

# Take any no of cluster and run you take 5.
plt.scatter(x[y_kmeans == 0, 0], x[y_kmeans == 0, 1], s = 100, c = 'red', label = 'Cluster 1')

plt.scatter(x[y_kmeans == 0, 0], x[y_kmeans == 0, 1], s = 100, c = 'blue', label = 'Cluster 2')
plt.scatter(x[y_kmeans == 0, 0], x[y_kmeans == 0, 1], s = 100, c = 'green', label = 'Cluster 3')
plt.scatter(x[y_kmeans == 0, 0], x[y_kmeans == 0, 1], s = 100, c = 'cyan', label = 'Cluster 4')
plt.scatter(x[y_kmeans == 0, 0], x[y_kmeans == 0, 1], s = 100, c = 'magenta', label = 'Cluster 5')

#Write Code for rest.SS

plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s = 300, c = 'yellow', label = 'Centroids')
plt.title('Clusters of customers')
plt.xlabel('Annual Income (k$)')
plt.ylabel('Spending Score (1-100)')
plt.legend()
plt.show()

